# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.37.0"


before_all do
  # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
end

lane :prepare_framework_release do |options|
  if !options[:version]
    raise "No version specified!".red
  end
  
  #Ensure the branch is clean
  if options[:allow_dirty_branch] != true
    ensure_git_status_clean
  end
  
  if options[:remote]
    remote = options[:remote]
  elsif ENV["DEPLOY_REMOTE"]
    remote = ENV["DEPLOY_REMOTE"]
  else 
    remote = "origin"
  end
  
  if options[:allow_branch]
    allowed_branch = options[:allow_branch]
  elsif ENV["DEPLOY_BRANCH"]
    allowed_branch = ENV["DEPLOY_BRANCH"]
  else 
    allowed_branch = "master"
  end
  
  #Ensure we are on the right branch
  ensure_git_branch(
    branch:allowed_branch
  )
  
  #Pull the latest to ensure we are up to date
  if options[:skip_git_pull] != true
    sh("git pull #{remote} #{allowed_branch}")
  end
  
  #Update the framework plist
  if options[:skip_plist_update] != true
    if options[:plist_path]
      plist_path = options[:plist_path]
    elsif ENV["DEPLOY_PLIST_PATH"]
      plist_path = ENV["DEPLOY_PLIST_PATH"]
    else 
      raise "No plist path specified. Use 'plist_path:'".red
    end
  
    set_info_plist_value(
      path: plist_path,
      key: "CFBundleVersion",
      value: options[:version]
    )
  end

  #Update the podspec
  if options[:skip_podspec_update] != true
    if options[:podspec]
      podspec = options[:podpsec]
    elsif ENV["DEPLOY_PODSPEC"]
      podspec = ENV["DEPLOY_PODSPEC"]
    else 
      raise "No podspec path specified. Use 'podspec:'".red
    end
  
    version_bump_podspec(
    path: podspec,
    version_number: options[:version]
    )
    
  end

  #Generate a Changelog
  if options[:skip_changelog] != true
    changelog = generate_github_milestone_changelog(
      github_organization: ENV["DEPLOY_GITHUB_ORGANIZATION"],
      github_repository: ENV["DEPLOY_GITHUB_REPOSITORY"],
      milestone: options[:version]
    )
    
    insert_text_into_file(
      file_path: ENV["DEPLOY_CHANGELOG_PATH"],
      text: changelog[:header] + changelog[:changelog],
      insert_delimeter: ENV["DEPLOY_CHANGELOG_DELIMTER"]
    )
  end

  if prompt(text: "#{options[:version]} has been prepped for release. Would you like to commit, tag, and push #{options[:version]} to #{remote}?".green, boolean: true,ci_input:"y")
    
    # commit the branch
    git_commit(
      path: ".",
      message: "Preparing for the #{options[:version]} release"
    )

    #push the branch
    push_to_git_remote(
      remote: remote
    )
    
    # tag the repo  
    add_git_tag(
      tag: "#{options[:version]}"
    )
  
    # push the tag
    if options [:skip_push_tags] != true
      push_git_tags_to_remote(
        remote: remote
      )
    end
    
    if !is_ci
      notification(
      title: "Release Preparation Complete",
      message: "The tag #{options[:version]} is now available"
      )
    end
    
  else 
    puts "OK. Make more additional changes and commit them, then run the `complete_release` lane"
  end
end

lane :complete_framework_release do |options|
  if options[:skip_ci_check] != true
    if !is_ci
      raise "#{lane_context[SharedValues::LANE_NAME]} should be run from a CI machine. If you want to override this, pass 'skip_ci_check:true'".red
    end
  end
  
  if !options[:version]
    raise "No version specified! Use 'version:VERSION_NUMBER'".red
  end
  
  #Ensure clean branch
  if options[:allow_dirty_branch] != true
    ensure_git_status_clean
  end
  
  if options[:remote]
    remote = options[:remote]
  elsif ENV["DEPLOY_REMOTE"]
    remote = ENV["DEPLOY_REMOTE"]
  else 
    remote = "origin"
  end
  
  if options[:allow_branch]
    allowed_branch = options[:allow_branch]
  elsif ENV["DEPLOY_BRANCH"]
    allowed_branch = ENV["DEPLOY_BRANCH"]
  else 
    allowed_branch = "master"
  end
  
  #Ensure we are on the right branch
  ensure_git_branch(
    branch:allowed_branch
  )
  
  #Pull the latest to ensure we are up to date
  if options[:skip_git_pull] != true
    sh("git pull #{remote} #{allowed_branch}")
  end
  
  # generate the carthage zip
  if options[:skip_carthage_framework] != true
    build_carthage_frameworks()
  end
  
  # Create a release
    #* Upload Notes
    #* Upload Carthage Asset
    
  if options[:github_organization]
    organization = options[:github_organization]
  elsif ENV["DEPLOY_GITHUB_ORGANIZATION"]
    organization = ENV["DEPLOY_GITHUB_ORGANIZATION"]
  end
  
  if options[:github_repository]
    repository = options[:github_repository]
  elsif ENV["DEPLOY_GITHUB_REPOSITORY"]
    repository = ENV["DEPLOY_GITHUB_REPOSITORY"]
  end
  
  if options[:skip_github_release] != true
    changelog = generate_github_milestone_changelog(
      github_organization: organization,
      github_repository: repository,
      milestone: options[:version]
    )
    
    if lane_context[SharedValues::CARTHAGE_FRAMEWORK]
      set_github_release(
        repository_name:"#{organization}/#{respository}",
        api_token:params[:api_token],
        tag_name:params[:version],
        description: changelog[:changelog],
        upload_assets: [lane_context[SharedValues::CARTHAGE_FRAMEWORK]]
      )
    else
      set_github_release(
        respository_name:"#{organization}/#{respository}",
        api_token:params[:api_token],
        tag_name:params[:version],
        description: changelog[:changelog]
      )
    end
      
  end
    
    #pod trunk push
    if options[:skip_pod_push] != true
      pod_push
      
      #pod spec lint
      pod_spec_lint
    end
end

lane :travis_commit do |options|
  if options[:configuration]
    configuration = options[:configuration]
  elsif ENV["AF_CONFIGURATION"]
    configuration = ENV["AF_CONFIGURATION"]
  else
    configuration = "Release"
  end
  
  test_framework(configuration: configuration)
  
  build_example(configuration: configuration)

  pod_spec_lint(
    quick:true
  )
end

desc "Runs all the tests"
lane :test_framework do |options|
  scan(
    configuration: options[:configuration]
  )
  
end

desc "Builds the example"
lane :build_example do |options|
  
  xcodebuild(
    workspace: ENV["EXAMPLE_WORKSPACE"],
    scheme: ENV["EXAMPLE_SCHEME"],
    build: true,
    destination: ENV["EXAMPLE_DESTINATION"],
    configuration: options[:configuration],
    build_settings: [["ONLY_ACTIVE_ARCH", "NO"]] 
  )
end

# You can define as many lanes as you want

after_all do |lane|
  # This block is called, only if the executed lane was successful
  
  # slack(
  #   message: "Successfully deployed new App Update."
  # )
end

error do |lane, exception|
  # slack(
  #   message: exception.message,
  #   success: false
  # )
end

# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
